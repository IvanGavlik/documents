Interface
	public static final variables and default, static and abstract methods
	The compiler automatically adds public to all interface methods
	an interface cannot extend a class, nor can a class extend an interface 
	(class implements interfac)
	Java waill fail to compile if a class or interface inherits two default methods with 
	the same signature and doesn’t provide its own implementatio

Java defines a functional interface as an interface that contains a single abstract method.

Lambda
params -> body

params
-() can be omitted in a lambda expression if there is one input parameter
- zero or more than one input parameter you need () 
- if for one param you specify type them must for all

body 
- if one line no need for: {} return and ;
- if more than one line must use: {} return and ;
- you can not  re‐declare a local variable
	(a, b) -> {int a = 10; return 5}; // does not compile
	
Functional interfaces
Predicate<T>	public boolean test(T t);

Polymorphism
1. The type of the object determines which properties exist within the object in memory.
2. The type of the reference to the object determines which methods and variables are
accessible to the Java program.

Casting variables:
1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
2. Casting an object from a superclass to a subclass requires an explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception may be thrown at runtime if
the object being cast is not actually an instance of that class.

Encapsulating Data
encapsulation is the idea of combining fi elds and methods in a class such that the methods operate on the data
In Java, it is commonly implemented with private instance
members that have public methods to retrieve or modify the data, commonly referred to
as getters and setters

Composition
In object‐oriented design, we refer to object composition as the property of constructing a
class using references to other classes in order to reuse the functionality of the other classes.
Object composition should be thought of as an alternate to inheritance
One of the advantages of object composition over inheritance is that it tends to promote
greater code reuse

Singleton
Singletons in Java are created as private static variables within the class, often with the name instance. They are accessed via a single
public static method, often named getInstance(), which returns the reference to the
singleton object. Finally, all constructors in a singleton class are marked private, which
ensures that no other class is capable of instantiating another version of the class.
	Ex: private static final HayStorage instance = new HayStorage();
can be done with lazy initi. then in getInstace must be careful abaut sycronization
	Ex: 
	private static volatile VisitorTicketTracker instance;
	public static VisitorTicketTracker getInstance() {
		if(instance == null) {
			synchronized(VisitorTicketTracker.class) {
				if(instance == null) {
					instance = new VisitorTicketTracker();
				}
			}
		}
		return instance;
	}
	
Immutable Objects
The immutable object pattern is a creational pattern based on the idea of
creating objects whose state does not change after they are created and can be easily shared
across multiple classes
Steps:
	1. Use a constructor to set all properties of the object.
	2. Mark all of the instance variables private and final.
	3. Don’t define any setter methods.
	4. Don’t allow referenced mutable objects to be modified or accessed directly.
	5. Prevent methods from being overridden

Rule 4. Ex:
	this.favoriteFoods = new ArrayList<String>(favoriteFoods);
	to get only data by index 
