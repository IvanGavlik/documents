Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-09-25T22:07:43+02:00

====== IO ======
Created srijeda 25 rujna 2019

==== Understanding Files and Directories ====

=== File System ===
A **file** is record within a file system that stores user and system data.
A **directory** is a record within a file system that contains files as well as other directories.
**File system** is in charge of reading and writing data within a computer. Different operating systems use different file systems to manage their data. 
A **path** is a String representation of a fi le or directory within a fi le system.
The **absolute path** of a file or directory is the full path from the root directory to the file or directory, including all subdirectories that contain the file or directory.
The **relative path** of a file or directory is the path from the current working directory to file or director

Unix-based systems use the forward slash / for paths, whereas Windows-based systems use the backslash \ 
System.out.println(System.getProperty("file.separator"));
System.out.println(java.io.File.separator);

=== File Class ===
is used to read information about existing fi les and directories, list the contents of a directory, and create/delete fi les and directories.
An instance of a File class represents the pathname of a particular fi le or directory on the fi le system.
The File class cannot read or write data within a fi le, although it can be passed as a reference to many stream classes to read or write data,

FIle constructor can have 
	String (abs or relative path) 
	another file + String (abs or relative path) together they represent full path 

methods:
**exists()** Returns true if the file or directory exists.
**getName()** Returns the name of the file or directory denoted by this path.
**getAbsolutePath**() Returns the absolute pathname string of this path.
**isDirectory**() Returns true if the file denoted by this path is a directory.
**isFile**() Returns true if the file denoted by this path is a file.
**length**() Returns the number of bytes in the file. 
**lastModified**() Returns the number of milliseconds since the epoch when the file
was last modified.
**delete**() Deletes the file or directory. If this pathname denotes a directory, then the directory must be empty in order to be deleted.
**renameTo**(File) Renames the file denoted by this path.
**mkdir**() Creates the directory named by this path.
**mkdirs**() Creates the directory named by this path including any nonexistent parent directories.
**getParent**() Returns the abstract pathname of this abstract pathname’s parent or null if this pathname does not name a parent directory.
**listFiles**() Returns a File[] array denoting the files in the directory.

==== Introducing Streams ====

=== Fundamentals ===
Each type of stream segments data into a “wave” or “block” in a particular way. 
For example, some stream classes read or write data as individual byte values.
Other stream classes read or write individual characters or strings of characters.

=== Nomenclature ===
Streams are in the java.io
Differences between Streams (FileInputStream) and Readers/Writers (FIleReader)
	The stream classes are used for inputting and outputting all types of binary or byte data.
	The reader and writer classes are used for inputting and outputting only character and String data.
Ex:
FileReader is a class that reads data from a file as characters or strings
ObjectOutputStream is a class that writes object data to a byte stream.

PrintWriter has no accompanying PrintReader class and the PrintStream class has no corresponding InputStream

java.io library defines four abstract classes that are the parents of all stream classes:  InputStream , OutputStream , Reader , and Writer .

**Be carefull: is mixing and matching stream classes that are not compatible**
new BufferedInputStream(new FileReader("zoo-data.txt")); // DOES NOT COMPILE
new BufferedWriter(new FileOutputStream("zoo-data.txt")); // DOES NOT COMPILE
new ObjectInputStream(new FileOutputStream("zoo-data.txt")); // DOES NOT COMPILE
new BufferedInputStream(new InputStream()); // DOES NOT COMPILE InputStream abstract

java.io 
A class with the word InputStream or OutputStream in its name is used for reading or writing binary data, respectively.
A class with the word Reader or Writer in its name is used for reading or writing character or string data, respectively
Most, input classes have a corresponding output class.
A low-level stream connects directly with the source of the data.
A high-level stream is built on top of another stream using wrapping.
A class with Buffered in its name reads or writes data in groups of bytes or characters and often improves performance in sequential file systems.
When wrapping a stream you can **mix and match** only types that inherit from the **same abstract** parent stream.

**InputStream** 
	The abstract class all InputStream classes inherit from
**OutputStream** 
	The abstract class all OutputStream classes inherit from
**Reader**
	The abstract class all Reader classes inherit from
**Writer**
	The abstract class all Writer classes inherit from
**FileInputStream**
	 Low Reads file data as bytes
**FileOutputStream**
	Low Writes file data as bytes
**FileReader**
	Low Reads file data as characters
**FileWriter**
	Low Writes file data as characters
**BufferedReader**
	High Reads character data from an existing Reader in a buffered manner, which improves efficiency and performance
**BufferedWriter**
	High Writes character data to an existing Writer in a buffered manner, which improves efficiency and performance
**ObjectInputStream**
	High Deserializes primitive Java data types and graphs of Java object from an existing InputStream
**ObjectOutputStream**
	High Serializes primitive Java data types and graphs of Java objects to an existing OutputStream
**InputStreamReader**
	High Reads character data from an existing InputStream
**OutputStreamWriter**
	High Writes character data to an existing
**PrintStream**
	High Writes formatted representations of Java objects to a binary stream
**PrintWriter**
	High Writes formatted representations of Java objects to a text-based output stream

**TODO CHECK DA LI METODA ILI KONSTRUKTOR BACA IZNIMKU** 

=== Common Operations ===
they are: Closing the Stream, Flushing the Stream, Marking the Stream, Skipping over Data

The InputStream and Reader classes include mark(int) and reset() methods to move the stream back to an earlier position. 
Before calling either of these methods, you should call the markSupported() method, which returns true only if mark() is supported

**mark(int)**
	You can then read as many bytes as you want up to the limit value
**reset()**
	If at any point you want to go back to the earlier position where you last called
	the stream will “revert” to an earlier state

**skip(long)** 
	might expect skips over a certain number of bytes
	

==== Working with Streams ====

=== InputStream OutputStream ===
This abstract class is the superclass of all classes representing an input/outut stream of **bytes**.

 
int 	available()
void 	close()
void 	mark(int readlimit)
boolean 	markSupported()
abstract int 	read()
int 	read(byte[] b)
int 	read(byte[] b, int off, int len)
void 	reset()
long 	skip(long n)

void 	write(byte[] b)
void 	write(byte[] b, int off, int len)
abstract void 	write(int b)

=== Reader Writer ===
Abstract class for reading/writing **character** streams.
The only methods that a subclass must implement are read(char[], int, int) and close(). 

abstract void 	close()
void 	mark(int readAheadLimit)
boolean 	markSupported()
int 	read()
int 	read(char[] cbuf)
abstract int 	read(char[] cbuf, int off, int len)
int 	read(CharBuffer target)
boolean 	ready()
void 	reset()
long 	skip(long n)

=== FileInputStream (InputStream) and FileOutputStream (OutputStream) ===
used to read/write  bytes from a file

The data in a FileInputStream object is  accessed by successive calls to the
read() (returns int) method until a value of -1 is returned, indicating that the end of the stream
read(), read(byte b[]) from 0 to b.lenggth , read(byte b[], int off, int len); 

FileInputStream(File file)
FileInputStream(FileDescriptor fdObj)
FileInputStream(String name)

int 	read()
int 	read(byte[] b)
int 	read(byte[] b, int off, int len)
long skip(long n)

FileOutputStream(File file)
FileOutputStream(File file, boolean append)
FileOutputStream(String name, boolean append)
FileOutputStream(String name)

write(byte[] b)
write(byte[] b, int off, int len)
write(int b)

 close()
 flush()

=== BufferedInputStream (InputStream) and BufferedOutputStream (OutputStream) ===
We use the underlying read(byte[]) method of BufferedInputStream , which returns the number of bytes read into the provided byte array. 
If the value returned is 0 ,we have reached the end of the file

The data is written into the BufferedOutputStream using the write(byte[],int,int)
method, which takes as input a byte array, an offset, and a length value, respectively

BufferedInputStream(InputStream in)
BufferedInputStream(InputStream in, int size)

int 	available()
int 	read()
int 	read(byte[] b, int off, int len)
long  skip(long n)

BufferedOutputStream(OutputStream out)
BufferedOutputStream(OutputStream out, int size)

void 	write(byte[] b, int off, int len)
void 	write(int b)

=== FileReader (InputStreamReader) and FileWriter (OutputStreamWriter) ===
Read/write char values instead of byte values
-1 can be returned if the end of the file is detected

FileReader(File file)
FileReader(FileDescriptor fd)
FileReader(String fileName)

int 	read()
int 	read(char[] cbuf, int offset, int length)

FileWriter(File file, boolean append)
FileWriter(FileDescriptor fd)
FileWriter(String fileName)
FileWriter(String fileName, boolean append)

void 	write(char[] cbuf, int off, int len)
void 	write(int c)
void 	write(String str, int off, int len)

=== BufferedReader (Reader) and BufferedWriter (Writer) ===
Reads text from a **character**-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.

BufferedReader(Reader in)
Stream<String> 	lines()
int 	read()
int 	read(char[] cbuf, int off, int len)
String 	readLine()

BufferedWriter(Writer out)
void 	newLine() 		Writes a line separator.
void 	write(char[] cbuf, int off, int len)
void 	write(int c)	Writes a single character.
void 	write(String s, int off, int len)

=== ObjectInputStream and ObjectOutputStream ===
**Serialization **is the process of converting an in-memory object to a stored data format
In order to serialize objects the class must implement the java.io.Serializable interface. 

**transient** means the value won’t be included in the serialization it will be null or defaoult primitive type value

**static class members are ignored** during the serialization and deserialization process

a variable called long serialVersionUID . is  not required as part of implementing the Serializable interface,  it is a good practice to do so and update this static class variable anytime you modify the class.

**ObjectOutputStream** have a method to serialize the object to the stream called void writeObject(Object) throws NotSerializableException .

**readObject()** throws the checked exception, ClassNotFoundException
the proper technique is to catch an EOFException , which marks the program encountering the end of the file

We can read and write null objects. Therefore, it is important to check for null values when reading from a serialized data stream.

If you use **default constructor** seted values in default constructor are ignored on deserelisazion

ObjectInputStream()
ObjectInputStream(InputStream in)
readObject()  throws IOException,  ClassNotFoundException

ObjectOutputStream()
ObjectOutputStream(OutputStream out)
 writeObject(Object obj)   throws IOException

=== PrintStream and PrintWriter ===

The PrintStream and PrintWriter classes are high-level stream classes that write formatted representation of Java objects to a text-based output stream. 
PrintStream class operates on OutputStream instances and writes data as bytes, whereas the PrintWriter class operates on Writer instances and writes data as characters.



=== Review of Stream Classes ===

==== Interacting with Users ====

=== Old Way ===

=== New Way ===
