malo humora prati : https://twitter.com/anablu6blu
relax zone: https://www.reddit.com/
backloog: https://ivan123.backlog.com 
ovo obavezno: PROFESSIONAL PROGRAMER https://github.com/charlax/professional-programming
tvrtka: https://github.com/charlax/entrepreneurship-resources

TODO: What programming projects have given you the most insight on a programming concept/technique?
TODO: PROGRAMING PROJECTS: https://www.codementor.io/projects

https://medium.com/@peterlee2068/software-design-principles-every-programmer-should-know-c164a83c6f87

on complex problems: https://uxdx.com/blog/breaking-down-complex-problems

The last three I dived into I ended up reading cover to cover.
Those were:
    Clean Code by Robert Martin
    Computer Science: An Overview by Glenn Brookshear
    Designing Data-Intensive Applications by Martin Kleppmann

how systems and applications are build and how they work 
https://mickens.seas.harvard.edu/publications?page=1#
https://www.youtube.com/watch?v=1uflg7LDmzI
-> nađi još ljudi i svega što možeš pratiti 


TODO: http://www.cs.sjsu.edu/~austin/cs252-fall13/CS252-Introduction.pdf

todo
https://developers.google.com and https://code.google.com/
-> find same for facebook, apple netflix and other companies (spring, hibernate ...itd, kafa)
-> https://medium.com/google-developer-experts

from programer to software architect 
-> https://connect.incose.org/pages/store.aspx
-> https://pragprog.com/titles/mkdsa/design-it/

https://ivan123.backlog.com/board/LIFE al
git hub top reop
Cracking the Coding Interview by Gayle Laakmann Mcdowell
https://towardsdatascience.com/15-data-science-books-you-should-read-6f6981e6b3d8
https://www.oreilly.com/library/view/the-design-of/9780321702081/
https://javatechonline.com/oops-design-principles/?fbclid=IwAR0sJaNdMjZVgDfO5w8VVXrmk1n8XG74NWO03lrG7Qi4eMLJM2OXX3NCwn8
https://javatechonline.com/solid-principles-the-single-responsibility-principle/?fbclid=IwAR1BelpHn6BDBoSw7K_opi35h_WC6yCp77qn1XCKCtMkeC2bn1ITtaoBO1E
https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
https://www.udemy.com/course/angular-application-architecture/learn/lecture/22753181#overview
https://www.quora.com/Can-algorithms-write-algorithms
https://andreasbm.github.io/web-skills/#architecture-and-paradigms
https://www.scalablepath.com/blog/sql-vs-nosql-when-you-should-use-one-over-the-other/?utm_source=Scalable+Path&utm_campaign=406546b971-EMAIL_CAMPAIGN_2020_11_05_04_19_COPY_01&utm_medium=email&utm_term=0_9849b27cd3-406546b971-244587870

code review: https://codereview.stackexchange.com/

next step: https://www.educative.io/courses/web-application-software-architecture-101
next: https://towardsdatascience.com/10-excellent-github-repositories-for-every-java-developer-41084a91ade9

programing contepst (java script programing conteps, java programing concpets, 
java spring concepts ... like 
(https://www.quora.com/What-is-an-incredibly-useful-JavaScript-concept-that-few-people-are-aware-of)

software project check list 
-> https://github.com/ardalis/new-software-project-checklist

programing secreate: Learn techniques, not tools
list of open source projces starter 2020, 2019  i tako dalje
code examples: https://www.programcreek.com, https://www.codota.com/code/java/classes/java.util.Spliterator

whrere to look
-> https://python.plainenglish.io/15-github-repos-that-every-developers-must-bookmark-right-now-eee01db63977
-> https://www.usnews.com/education/best-global-universities/computer-science?utm_source=usn_fb&fbclid=IwAR2c3VcWAVYKv_VLMuyOpUO7w8-HHtjQ9j6WuFjWTuUrcy7RhOhELqtj-Gg
-> https://citeseerx.ist.psu.edu/mcsutils/newAccount
- https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read?page=1&tab=votes#tab-top
- also: https://www.coursera.org/learn/learning-how-to-learn/home/welcome https://www.supermemo.com/en/archives1990-2015/articles/20rules

- FIRST STEP: https://awesomeopensource.com/project/charlax/professional-programming
- second step : https://awesomeopensource.com/project/DovAmir/awesome-design-patterns
- https://qz.com/1821327/450-free-ivy-league-university-courses-you-can-take-online/?utm_source=facebook.com&utm_medium=social&utm_campaign=partner-par&fbclid=IwAR3hjeQftHFQIqiZW1YShLsdkFJpZao_U85fDFNxY2Z76DdWYSS9ls9n-T0
- where to look for books: spinger, oreily
- where to look for tutorials: 
- academica 
- see: google resarh papires and othre papiers 
- google publication: https://research.google/pubs/?area=algorithms-and-theory&area=distributed-systems-and-parallel-computing&area=hardware-and-architecture&area=software-engineering&area=software-systems&year=2002
- code base code examples 
- https://github.com/vicky002/AlgoWiki computer sience everyting on programing repo 

- path https://www.codecademy.com/learn/paths/data-science?utm_campaign=cp_pp_2020&utm_term=FreeUsers_DNF&utm_content=Carousel_Images_CareerPaths-Choose_V2&utm_source=facebook&utm_medium=paid-social&hsa_acc=1178293958850641&hsa_cam=6175245531710&hsa_grp=6175245532110&hsa_ad=6216624674510&hsa_src=fb&hsa_net=facebook&hsa_ver=3&fbclid=IwAR35fZOW9oYdFP-JXElcHekXRVDfH8M1ze3LY0RIsFTFzWxMTeXBXMRA5Os
- path https://www.codecademy.com/learn/paths/back-end-engineer-career-path?utm_campaign=cp_pp_2020&utm_term=FreeUsers_DNF&utm_content=Carousel_Images_CareerPaths-Choose_V2&utm_source=facebook&utm_medium=paid-social&hsa_acc=1178293958850641&hsa_cam=6175245531710&hsa_grp=6175245532110&hsa_ad=6216624674510&hsa_src=fb&hsa_net=facebook&hsa_ver=3&fbclid=IwAR3Z1VBUyUHC5lq1AB4tV7G_wwYYEkaI-x2GiL53jSRQAUguId2-4vNh6RU
- read all his boooks https://martinfowler.com/books/
- https://medium.com/ai-in-plain-english/10-data-science-courses-from-harvard-705fb36c0999
-> blog : https://www.feedspot.com/?dd=4311523355218716
-> books: https://github.com/smellslikekeenspirit/an-askreddit-list-of-compsci-books
-> https://javarevisited.blogspot.com/2020/04/top-10-advanced-core-java-courses-for-experienced-developers.html#ixzz6j1aIo3YA
-> project https://awesomeopensource.com/projects

-> https://awesomeopensource.com/project/NARKOZ/guides
-> https://awesomeopensource.com/project/ossu/computer-science
-> https://awesomeopensource.com/project/tuvtran/project-based-learning

-> java repo: https://github.com/akullpp/awesome-java https://github.com/TheAlgorithms/Java https://github.com/iluwatar/java-design-patterns
-> jave repo : https://free-for.dev/?fbclid=IwAR0LWTqhYrftCrXuQxuLPjPlo4OYjeZDMxyfI0oNcuF1y4T0ugRrYZa8_wg#/

-  https://java-design-patterns.com/principles/
-> https://en.wikipedia.org/wiki/List_of_software_development_philosophies
-> https://en.wikipedia.org/wiki/Category:Programming_principles
-> https://en.wikipedia.org/wiki/Outline_of_computer_programming
-> https://en.wikipedia.org/wiki/Outline_of_software_engineering
-> https://en.wikipedia.org/wiki/Software_development_process
-> https://en.wikipedia.org/wiki/Programming_paradigm

research articles  
https://noblepapers.com/software-engineering-article-research-articles/
https://www.longdom.org/peer-reviewed-journals/software-engineering--research-articles-492.html


microservices
-> https://microservices.io/
-> https://awesomeopensource.com/project/florinpop17/app-ideas
-> path: https://aashish-academy.teachable.com/p/java-with-micro-services/?preview=logged_out&fbclid=IwAR1zhJy9DZoaCtS_S63JqdnIOuZINj4LaPPU0yG63b85W3mcdn9mq5HYw0c
-> event driven 
	- https://www.youtube.com/watch?v=DQ5Cbt8DQbM
	- https://www.youtube.com/watch?v=gxfERVP18-g
-> https://javatechonline.com/microservices-architecture/?fbclid=IwAR3eqo52CRHlXyZXjDsCMoN9C_NPAgKfCfOdphFTXmGrbYMUJxQilcfiVI0
-> https://elastisys.com/evaluation-of-cloud-native-message-queues/
-> https://muhib.me/introduction-to-system-scalability-and-reliability
-> https://www.javacodegeeks.com/2021/05/eleven-patterns-problems-solutions-related-to-microservices-and-in-particular-distributed-architectures.html

tools
-> https://awesomeopensource.com/project/goabstract/Awesome-Design-Tools
-> https://awesomeopensource.com/project/goabstract/Awesome-Design-Tools#accessibility-tools

Computer Sience and Basic 
-> https://teachyourselfcs.com/
-> https://awesomeopensource.com/project/prakhar1989/awesome-courses
-> algo https://algorithm-visualizer.org/backtracking/hamiltonean-cycles
-> https://lethain.com/notes-sicp/
-> https://github.com/ossu/computer-science#core-programming
-> https://ai.plainenglish.io/10-data-science-courses-from-harvard-705fb36c0999

see: 
https://www.reddit.com/r/softwaredevelopment/comments/kidjbh/i_have_never_ever_seen_a_project_with_good_code/
https://www.reddit.com/r/softwaredevelopment/comments/kkesdl/code_reading_techniques/
https://www.toptal.com/designers/ui/web-layout-best-practices
https://www.toptal.com/designers/product-design/how-to-make-a-portfolio

Programing path MIT 
- https://laconicml.com/computer-science-engineer-mit-university/?fbclid=IwAR1HI6VaMg3XtwCUp5evzJP7ks_N9nP8_QEu8RRPDqJHgM3XsmDHYFovCf4

Science 
 - https://medium.com/ai-in-plain-english/10-data-science-courses-from-harvard-705fb36c0999

Java Path 
- https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html?fbclid=IwAR345KI_GZglgSLBHMzL7DSe4_4AIzaMMANy6MDHQCAZkDTib53T1neNrbA#123
- https://www.java67.com/2020/07/top10-free-courses-to-learn-full-stack.html?fbclid=IwAR38MrfM0_cYddFN6Yl5F3ZgsDwvbvaveGwnsOJ57k8wS9EK1nfVsN0IM70
-> https://www.youtube.com/watch?v=8G9h3XjffzU&feature=share&fbclid=IwAR0HWZYPBEZd3tAt_M6MzWe7a2i_zgn7vas1pGCPUIEBxUgbBusEkTaSlD4

Java 
- https://cheatsheets.tutorials24x7.com/programming/java
- https://medium.com/javarevisited/10-books-java-developers-should-read-in-2020-e6222f25cc72
- https://www.coderstea.com/post/java/get-ready-to-deep-dive-java-memory-management-garbage-collector/
- https://www.oracle.com/technical-resources/
- https://inside.java/

Spring
- https://www.youtube.com/watch?v=Qok653w524g
- books: https://dev.to/javinpaul/5-awesome-books-to-learn-spring-boot-microservices-and-spring-cloud-for-java-developers-2330?fbclid=IwAR1H-RTIlLTZQyWhAo9GIXZWsb8NWqdyTaCnQ58SXXDmj7BHV0ftvwZrQYY
- testing: https://www.baeldung.com/spring-5-junit-config
- https://www.javaguides.net/2018/10/20-free-open-source-projects-using-spring-framework.html
- https://medium.com/javarevisited/12-advanced-spring-framework-courses-for-java-programmers-a273f6e4448c

java tools
- https://www.libhunt.com/l/java/trending
- mavaen and gradle: https://app.pluralsight.com/paths/skill/java-tooling
- InteliJ https://dev.to/javinpaul/5-best-courses-to-learn-intellij-idea-for-java-developers-5e6n?utm_source=dlvr.it&utm_medium=facebook

Math
- probabilty: https://www.youtube.com/watch?v=TluTv5V0RmE&list=PLUl4u3cNGP61MdtwGTqZA0MreSaDybji8&index=2

html templates
https://colorlib.com/wp/html5-one-page-website-templates/?v=fd4c638da5f8

Reasrche papers
-> https://www.scribendi.com/academy/articles/free_online_journal_and_research_databases.en.html
-> scihub
-> https://explore.openaire.eu/search/find?fbclid=IwAR3AVlK_0bsCEynCGvbhFbqx4f-SXnIrrfuv0ovo5Fb96u0NoNX8dCS249U
-> https://www.researchgate.net/?fbclid=IwAR1OPWM2p6eNooGZ0IWMqe7j3XSnOiZJFF3UfKyZGrcpB089nMFvQCF_wAU
-> https://booksc.xyz/?fbclid=IwAR31UzA1Db3U2_V8mu5RCvwgxhk7JsrqfPK6sEduZdz1mxXmTycMN6VxrtY

Design patterns
- https://www.reddit.com/r/softwaredevelopment/comments/iwvmak/whats_the_best_way_to_learn_design_patterns/

Algo
- https://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html#ixzz6iji4dzIK


how to start with open source projects
-> https://community.apache.org/gettingStarted/101.html

TODO projeckts 
-> 
I'm a big proponent of starting by implementing a simple interpreted language. 
This has the advantage of exercising a lot of different kinds of logic (parsing, managing state, propagating errors... etc)
 and giving you a solid finished project (your own language!) without depending on any libraries that have a lot of incidental
 complexity and take effort to learn (like GUI libraries).

I started learning Haskell with Write Yourself a Scheme in 48 Hours

, which was a lot of fun. Then I turned that interpreter into one for my own language,
 which was a project that taught me a lot in general, not just about functional programming. 
 If you're curious, I've written more about this here: What programming projects have given you the most insight on a programming concept/technique?.

I actually also learned Scheme in a similar way, at roughly the same time: I was taking 61a, our intro course based on SICP
and the final project was an interpreter for Logo (a different kind of Lisp). That was also an interesting project, 
although not nearly as fun or enlightening as designing my own language.


-> katalog net -> slicno i da korsnik moze staviti preference i pregled po itemu-u 
-> https://thenextweb.com/syndication/2020/09/30/test-your-python-skills-with-these-10-projects/?utm_source=TNW&utm_campaign=7452088fa7-EMAIL_CAMPAIGN_2018_06_07_01_28_COPY_01&utm_medium=email&utm_term=0_32f70ba9aa-7452088fa7-12770317&mc_cid=7452088fa7&mc_eid=0a925b8cee
-> AFTER POLARIS INVESTIGATE VIRTUAL REALITY -> WORKSPACE AND DESKTOP (like running virtual assitend ghoast) 
	-> for hello workd project take batefiiled on goole streats
-> chalaging projeckts (programming challenges project) 
	-> https://itnext.io/42-projects-to-practice-programming-skills-6f5acc10fec0
	-> https://web.eecs.utk.edu/~azh/blog/challengingprojects.html
	-> https://www.codementor.io/@npostolovski/40-side-project-ideas-for-software-engineers-g8xckyxef
	-> https://awesomeopensource.com/projects/competitive-programming
	-> https://medium.com/better-programming/10-great-programming-projects-to-improve-your-resume-and-learn-to-program-74b14d3e9e16
-> java: https://itnext.io/42-projects-to-practice-programming-skills-6f5acc10fec0
-> improve resume: https://medium.com/better-programming/10-great-programming-projects-to-improve-your-resume-and-learn-to-program-74b14d3e9e16
-> https://www.codementor.io/@npostolovski/40-side-project-ideas-for-software-engineers-g8xckyxef
https://en.wikipedia.org/wiki/List_of_computing_and_IT_abbreviations

-> https://1000projects.org/oracle-database-projects.html
-> https://nevonprojects.com/web-based-project-ideas-topics/
-> https://dev.to/javinpaul/20-software-design-problems-from-coding-interviews-5h4b?fbclid=IwAR10H2sQLGsDR-DASmZ4E7PFBwtcniatRDcw5jZ3v0tXSFLxX7zvD5RPS4k
also:
-> https://medium.com/javarevisited/top-5-courses-to-learn-software-architecture-in-2020-best-of-lot-5d34ebc52e9
-> https://medium.com/javarevisited/top-5-courses-to-learn-microservices-in-java-and-spring-framework-e9fed1ba804d?
-> 	project ideas
		-> 1. njuskalo, oglasi scarper and then deliver on email
		-> 2. prepoznvanje sa letaka itema i onda slanje na email (akcije u trgovini i tako to)
-> https://www.quora.com/Which-are-the-top-open-source-projects-in-Java
->  https://medium.com/analytics-vidhya/top-4-data-science-projects-that-can-get-you-hired-in-2021-8999bd17fbee
-> https://medium.com/analytics-vidhya/must-try-open-source-deep-learning-projects-for-computer-science-students-798da65ab0a8
-> https://www.quora.com/What-are-some-Python-based-projects


List_of_computer_scientists and programmers
-> https://en.wikipedia.org/wiki/List_of_computer_scientists
-> https://en.wikipedia.org/wiki/List_of_programmers

TODO EcOMERCE PROJECT 
-> USER CAN BUILD THER ECOMERCE PLATFORMM 

-> https://nevonprojects.com/customer-targeted-e-commerce/
-> https://nevonprojects.com/fitness-club-management-system/


Kafka
- https://app.pluralsight.com/player?course=kafka-build-deploy-monitor-real-world-application&author=justin-pihony&name=129ba514-d8e4-450f-a6d0-ee9fa41d5a5f&clip=0&mode=live
https://github.com/spring-cloud/spring-cloud-stream-binder-kafka
https://docs.spring.io/spring-cloud-stream/docs/Brooklyn.RELEASE/reference/html/contenttypemanagement.html
https://aseigneurin.github.io/2018/08/02/kafka-tutorial-4-avro-and-schema-registry.html
- https://blog.usejournal.com/the-best-books-to-learn-apache-kafka-b808f9be43d9
- https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321

Git
- https://app.pluralsight.com/paths/skill/managing-source-code-with-git

Testing
- https://app.pluralsight.com/paths/skill/unit-testing-in-java

CSS
- https://app.pluralsight.com/paths/skill/css

Angular
- https://app.pluralsight.com/paths/skill/angular  
- https://indepth.dev/


SoftwRE ARHITECTURE
- https://www.nasa.gov/sites/default/files/atoms/files/robert_kraus-_application_of_mbse_principals_to_an_automotive_driveline_sub-system_architecture.pdf
- https://files.ifi.uzh.ch/rerg/amadeus/teaching/courses/it_architekturen_hs07/Component_Modeling.pdf
- https://www.ics.uci.edu/~taylor/
- https://www.cs.ccsu.edu/~stan/classes/CS410/Notes16/06-ArchitecturalDesign.html
- Software Architecture in Practice, book
-> https://www.youtube.com/playlist?list=PLJN9ydlFnJsiEgyjO3D3yBhtiENymhF8G
- https://www.youtube.com/playlist?list=PLJN9ydlFnJsiEH_U9guHTNs6H2tH00h9S
- https://www.amazon.com/Lean-Architecture-Agile-Software-Development/dp/0470684208
- "The Software Architect Elevator" by Gregoe Hohpe
-  My Architecture series in AWS 
- https://www.educative.io/courses/grokking-the-system-design-interview?aid=5082902844932096&utm_source=google&utm_medium=cpc&utm_campaign=grokking-row&gclid=Cj0KCQjwmcWDBhCOARIsALgJ2QdjLTuGjEbusOTYUmPMCnqPjMI2M27srugrSWrQY3vTl1TKGCxeSqsaAguXEALw_wcB
- Many you tube resources on how systems have been built. Instagram Facebook uber etc. Google and you will find many resources on the same system
- "Fundamentals of Software Architecture: An Engineering Approach" Book by Mark Richards and Neal Ford.
https://eng.uber.com/architecture-api-gateway/

from dev to arhitect
- 12 Essential Skills for Software Architects - Dave Hendricksen
- Fundamentals of Software Architecture - Mark Richards, Neal Ford
- https://www.reddit.com/r/softwarearchitecture/comments/mrbcgu/making_my_own_masters_in_software_architecture/

https://www.reddit.com/r/softwarearchitecture/comments/mxdgze/where_can_i_find_resources_for_large_scale_system/
https://learning.oreilly.com/library/view/fundamentals-of-software/9781492043447/
- micoresrvices https://github.com/davidetaibi/Microservices_Project_List
				https://app.pluralsight.com/paths/skill/microservices-architecture
				https://app.pluralsight.com/paths/skill/domain-driven-design
- courses https://medium.com/javarevisited/top-5-courses-to-learn-software-architecture-in-2020-best-of-lot-5d34ebc52e9
- engineering: https://www.springer.com/gp/computer-science/software-engineering
- SOA  https://javarevisited.blogspot.com/2019/09/top-5-courses-to-learn-soa-service-oriented-architecture-microservices.html?utm_source=dlvr.it&utm_medium=facebook
- aks the Java Arfchitects https://www.youtube.com/watch?v=O6ya2uGsIP0
- https://medium.com/swlh/everything-aboutsoftware-architecture-dfd2b9351ef4
- https://www.java-success.com/writing-low-latency-applications-in-java/
- https://levelup.gitconnected.com/software-architecture-the-important-architectural-patterns-you-need-to-know-a1f5ea7e4e3d
- https://medium.com/event-driven-utopia/event-driven-apis-understanding-the-principles-c3208308d4b2
- https://towardsdatascience.com/the-design-of-an-event-store-8c751c47db6f
- https://3r3bu5.github.io/development/system%20design/2021/06/06/System-Design-Basics.html

Design Patterns
- https://java-design-patterns.com/
- https://www.amazon.com/gp/product/0471958697?ie=UTF8&tag=martinfowlerc-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0471958697
- https://ravindraelicherla.medium.com/10-design-patterns-every-software-architect-must-know-b33237bc01c2

Big Data 
- certification https://www.bigdataframework.org/certifications/enterprise-big-data-professional/
- courses https://www.mltut.com/best-online-courses-for-data-science-to-become-a-skilled-data-scientist/?fbclid=IwAR16yvXjzakG5plu4ZBSNi4jPTfUBTvOz8QGwSBFtiPx6DwnVCXO_hAqKTU


Writing Effectively
https://www.youtube.com/watch?v=vtIzMaLkCaM

study lesss study smart
https://www.youtube.com/watch?v=IlU-zDU6aQ0

Mini Habits
https://www.youtube.com/watch?v=aHDvEfiSipo


Podcast and radio
https://www.fastcompany.com/90467787/6-podcasts-that-will-make-you-smarter?utm_source=facebook.com&utm_medium=social&fbclid=IwAR1fT6oI_G-c6qKTz-yv2MMVM1QkJSjEoIoDa25LlW7WZUgqZWwXeifnXak&fbclid=IwAR3KUQyXa_8U56z6jQAmIfzoi0I-quRA2iEN55NR7QHP02hySKECtHfOTVk


Soft skills 
- https://www.quora.com/What-can-I-learn-in-the-next-5-minutes-that-can-be-beneficial-for-my-life
- https://www.quora.com/What-are-some-habits-that-separate-the-rich-from-the-poor
- respect skills https://www.youtube.com/watch?v=RgkghUvC6PA
- argumenting https://www.youtube.com/watch?v=nS9W-wlJHPA
- Mr pravi https://www.youtube.com/watch?v=P8-fYbcCpuU


Blog and writing
-> https://thewritepractice.com/write-a-transformation-story/
-> https://writershelpingwriters.net/2020/09/awesome-writing-tips-from-6-famous-writers/
-> https://writershelpingwriters.net/2020/09/writers-are-you-struggling-its-time-to-turn-the-page/

No Programing books to read
-> https://www.quora.com/What-is-the-one-book-that-you-think-reading-it-will-change-my-life-to-the-better-immediately

AI
-> https://chrome.google.com/webstore/detail/find-code-for-research-pa/aikkeehnlfpamidigaffhfmgbkdeheil?fbclid=IwAR0ZWl4QIFwTiPJHbVyPVnbrALIUXRqKs5BLR4OvN95EgJBIh3Ze_bw8fkA


Jenkis and Docker
-> https://www.java67.com/2019/03/5-free-devops-courses-to-learn-jenkins.html?utm_source=dlvr.it&utm_medium=facebook

linux
- http://cb.vu/unixtoolbox.xhtml?utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20200314+prog+nl&utm_medium=email&utm_source=topic+optin&utm_campaign=awareness&utm_content=20210116+prog+nl&mkt_tok=eyJpIjoiTm1FeE9EQm1aak0wWTJFeSIsInQiOiJtbWdGd1p4ZU1UVTdhUnZmeDhaU1JMUjIwR1VwMk00UFBRZEw0S3ZRZ29aMjROTnRNajJYT2lUSDBOckRJd2s5eTdvc3NxWU9Vajh3ZTZNMlVqYmZFaHBidE90XC9PaEp2OURnNExyVG8yMFZTN3lRTFVrWG05bTJXNHJmdFVieGIifQ%3D%3D

https://en.wikipedia.org/wiki/List_of_Java_frameworks

3 Books to Improve Your Coding Skills:
1) Algorithms by Robert Sedgewick
2) Code Complete by Steve McConnell
3) Functional Thinking by Neal Ford


found same for java 
-> https://js.plainenglish.io/10-significant-repos-on-github-for-javascript-developers-8d06bd1f6b03?gi=8d2f0619c313

testing
-> https://artoftesting.com/software-testing-tutorial

AI and Quantum comps
-> https://medium.com/illumination-curated/is-quantum-machine-learning-the-next-thing-6328b594f424

rest api 
https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#advanced-queries

trends
https://opensource.com/article/21/3/enterprise-java-tools
JDK 11,Spring boot 2.X,Quarkus,kubernetes,spring boot lambda(maven/grade based),JWT,API gateway,Spinnaker,using Redis for caching,Kafka,gRPC for inter micro service communication instead of REST,GraphQL for external service communication insrrad of REST,vue JS+Nuxt Js,deploying rpm as package(using Netflix Nebula) etc

open source project managment
- https://github.com/PumpkinSeed/oss-standard

code quality 
-> https://duecode.io/blog/how-to-check-code-quality/
-> https://duecode.io/blog/code-quality/
-> https://duecode.io/blog/code-quality-tools/

todo curesea
https://www.coursera.org/specializations/software-design-architecture?action=enroll&recoOrder=1&utm_campaign=QfOUcIjmEeuiLbV1NbTVAw&utm_medium=email&utm_source=recommendations
https://www.coursera.org/learn/introduction-mongodb?recoOrder=4&utm_medium=email&utm_source=recommendations&utm_campaign=QfOUcIjmEeuiLbV1NbTVAw
https://www.coursera.org/specializations/software-development-lifecycle?recoOrder=6&utm_medium=email&utm_source=recommendations&utm_campaign=QfOUcIjmEeuiLbV1NbTVAw
https://www.coursera.org/specializations/pcdp?recoOrder=7&utm_medium=email&utm_source=recommendations&utm_campaign=QfOUcIjmEeuiLbV1NbTVAw
https://www.coursera.org/learn/object-oriented-design?recoOrder=23&utm_medium=email&utm_source=recommendations&utm_campaign=QfOUcIjmEeuiLbV1NbTVAw

books to read (no it)
https://www.quora.com/What-are-some-good-books-to-read-which-are-under-300-pages

open worm - simulate cells in the body 
https://github.com/openworm/openworm

programing on web page to improve coding
-> You can go through the following links.
http:://www.geeksforgeeks.org
http:://www.codeforces.com
http:://www.codechef.com
http:://www.projecteuler.net
http:://www.hackerrank.com
http:://www.leetcode.com
http:://www.spoj.com

Functional programing (java script)
-> https://guide.elm-lang.org/architecture/


-> todo software 
-> http://www.airccse.org/journal/ijsea/papers/0711ijsea01.pdf
-> testing clanak www.airccse.org/journal/ijsea/papers/1011ijsea04.pdf
-> http://www.airccse.org/journal/ijsea/papers/0711ijsea04.pdf
-> http://www.airccse.org/journal/ijsea/papers/0711ijsea08.pdf
-> http://airccse.org/journal/ijsea/papers/0111ijsea01.pdf
-> stao: http://www.airccse.org/journal/ijsea/vol2.html

-> good: https://www.academia.edu/44484958/Course_notes_of_Software_Engineering_II_INF_232_99_
-> https://www.academia.edu/44434373/_DynaDBEdit_Dynamic_Database_Textbox_Field_and_Validator_for_Web_and_Application_Software



-> stack overflow: https://meta.stackoverflow.com/questions/254318/how-to-subscribe-to-tags
