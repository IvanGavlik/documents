Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-09-24T01:31:16+02:00

====== Concurrency ======
Created utorak 24 rujna 2019

==== Intro ====

=== Thread Types ===
**System thead **is thread created by the JVM and runs in th e background of the applicaton.
**User defined thread**  is created by the applicattion developer to accomplish a specific task (calls the main)

=== Understanding Thread Concurrency ===
OS use thread scheduler to determine which threads should be executing.
Context switch is the process of storing a thread's current state and later restoring the state of the thread to continue execution.
Thread can interrupt or supersede another thread if have higer priority.
Thread priority is a number
Thread.MIN_PRIORITY = 1
Thread.NORM_PRIORITY = 5
Thread.MAX_PRIORITY = 10

=== Runnable ===
interface void run();

=== Callable ===
interface V call throws Exception;
Callable is sam as  the Supplier in that they both take no arguments and
return a generic type. One difference is that the method in Callable can throw a checked Exception
The compiler does not take into account the fact that the body of the lambda expression happens to throw an exception; therefore, it does not know how to tell them apart. It will not compile

=== Creating a thread ===
1. create Thread
	a. implement Runnable
	b. extend Thead class and override run
2. call start
	a. new Thread(new ImplRunnable()).start();

you will have one main thread and + yours theads
Calling run() does not stat new thread 

=== Polling with Sleep ===
Polling is the process of inter-mittently checking data at some fixed interval.
use Thread.sleep()  (requests the current thread of execution rest for a specified number
of milliseconds) to implement it.
Thread.sleep() throws the checked InterruptedException

==== Creating ====

=== Introducing the Single-Thread Executor ===
ExecutorService is an interface
Executors.newSingleThreadExecutor(); factory 
main() method is  an independent thread from the ExecutorService , and it can perform tasks while the other thread is running.

service.execute(Runnabe r); at the end you must call service.shutdown();


=== Shutting Down a Thread Executor ===
Once you have finished using a thread executor, it is important that you call the
shutdown() method. A thread executor creates a non-daemon thread on the first task that
is executed, so failing to call shutdown() will result in your application never terminating.

see 7.2 on page 337

**shutdown()** does not actually stop any tasks that have already been submitted to the thread executor. 
If you want to cancel all running and upcoming tasks use  **shutdownNow()** , which attempts to stop all running tasks and discards any that have not been started yet.  (It is possible to create a thread that will never terminate, so any attempt to interrupt it may be ignored).
Returns a List<Runnable> of tasks that were submitted to the thread executor but that were never started.


=== Submitting Tasks ===
void **execute**(Runnable r)
	completes task asynchronously (return type of the method is void)
	fire-and-forget method

Future<?> **submit**(Runnable r)
	completes task asynchronously ?
	user Future to determine if the task is complete

<T> Future<T> **submit**(Callable<T> t)
	executes calllable and returs Future

<T> List<Future<T>> **invokeAll**(Collection<? extends Callable<T>> tasks) throws InterruptedException
	Executes the given tasks, synchro-nously returning the results of all tasks
	as a Collection of Future objects, in the same order they were in the original collection

<T> T **invokeAny**(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException
	Executes the given tasks, synchronously
	returns the result of one of the tasks that successfully completes execution, cancelling all unfinished tasks.

execute() does not support Callable expressions
**Synchronous **will wait until the results are available before returning control to the enclosing program
**Future.isDone()** returns true for each element in the returned List , a task could have completed normally or thrown an exception.

invokeAll()  will wait indefinitely until all tasks are complete, while the invokeAny() method will wait indefinitely until at least one task completes.

=== Waiting for Results ===
The **Future** class includes methods that are useful in determining the state of a task
	**boolean** **isDone()** Returns true if the task was completed, threw an exception, or
	was cancelled.
	**boolean** **isCancelled()** Returns true if the task was cancelled before it completely
	Â­ ormally.
	**boolean cancel()** Attempts to cancel execution of the task
	**V get()** Retrieves the result of a task, waiting endlessly if it is not yet
	available
	**V get(long timeout, TimeUnit unit)  **waiting the specified amount
	of time. If the result is not ready by the time the timeout is
	reached, a checked TimeoutException will be thrown
	TimeUnit.NANOSECONDS, MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS

with Runnable  in which the get() methods always return null , the get() methods on
a Future object return the matching generic type or null .

service.submit(() -> {Thread.sleep(1000); return null;});
service.submit(() -> {Thread.sleep(1000);})
The first lambda expression has a return type, the compiler treats this as a Callable expression that supports checked exceptions. 
The second lambda expression does not return a value; therefore, the compiler treats this as a Runnable expression. 
Since Runnable methods do not support checked exceptions, the compiler will report an error trying to compile this code
snippet.

ExecutorService
	**awaitTermination**(long timeout, TimeUnit unit)
	waits the specified time to complete all tasks, returning sooner if all tasks finish or an InterruptedException is detected
EX:
ExecutorService service = null;
try {
	service = Executors.**newSingleThreadExecutor**();
	// Add tasks to the thread executor
} finally {
	if(service != null) service.**shutdown**();
}
if(service != null) {
	service.**awaitTermination**(1, TimeUnit.MINUTES);
	if(service.**isTerminated**())
		System.out.println("All tasks finished");
	else
		System.out.println("At least one task is still running");
}

=== Scheduling Tasks ===
**ScheduledExecutorService** , which is a subinterface of  ExecutorService is used
	ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();

**schedule**(Callable<V> callable,  long delay, TimeUnit unit)
	Creates and executes a Callable task after the given delay

**schedule**(Runnable command, long delay, TimeUnit unit) 
	Creates and executes a Runnable task after the given delay

**scheduleAtFixedRate**(Runnable command, long initialDelay, long period, TimeUnit unit) 
	Creates and executes a Runnable task after the given initial delay, creating a new task every period value that passes.
	creates a new task and submits it to the executor every period, regardless of whether or not the previous task fi nishe

**scheduleAtFixedDelay**(Runnable command, long initialDelay,long delay, TimeUnit unit)
	Creates and executes a Runnable task after the given initial delay and subsequently with the given delay between the termination of one execution and the commencement of the next
	creates a new task after the previous task has fi nished. For example, if the fi rst task runs at 12:00 and takes fi ve minutes to fi nish, with a period of 2 minutes, then the second task will start at 12:07.

**ScheduledFuture<V>** is identical to the Future<V> class, except that it includes a **getDelay**() method that returns the delay set when the process was created

Future<?> result1 = service.**schedule**(task1, 10, TimeUnit.SECONDS);

=== Increasing Concurrency with Pools ===
A **thread pool** is a group of pre-instantiated reusable threads that are available to perform a set of arbitrary tasks.
Difference between a single-thread and a pooled-thread executor is what happens when a task is already running.
While a single-thread executor will wait for an available thread to become available before running the next task, a pooled-thread executor can execute the next task concurrently.
If the pool runs out of available threads, the task will be queued by the thread executor and wait to be completed

**newSingleThreadExecutor**()
	 ExecutorService Creates a single-threaded executor that uses a single worker thread operating off an unbounded queue. Results are processed sequentially in the order in which they are submitted**.**
**newSingleThreadScheduledExecutor**()
	 Scheduled ExecutorService Creates a single-threaded executor that can schedule commands to run after a given delay or to execute periodically.

**newCachedThreadPool**() 
	ExecutorService Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.
	create a thread pool of unbounded size,allocating a new thread anytime one is required or all existing threads are busy. 
	This is commonly used for pools that require executing many short-lived asynchronous tasks.

**newFixedThreadPool(**int n,Threads)	
	ExecutorService Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
	a number of threads and allocates them all upon creation. 
	As long as our number of tasks is less than our number of threads, all tasks will be executed concurrently

**newScheduledThreadPool**(int nThreads) Scheduled ExecutorService Creates a thread pool that can schedule commands to run after a given delay or to execute periodically.

==== Synchronizig data access ====

=== Protecting Data with Atomic Classes ===
in java.util.concurrent.atomic package
**Atomic** is the property of an operation to be carried out as a single unit of execution without any interference by another thread
Atomic classes: AtomicBoolean, AtomicInteger, AtomicIntegerArray, AtomicLong, AtomicLongArray, AtomicReference, AtomicReferenceArray
Common atomic methods: 
get() , set() , getAndSet() , incrementAndGet(), getAndIncrement() , decrementAndGet(), getAndDecrement()

Uing the atomic classes ensures that the data is consistent between workers (theads) and that no values are lost due to concurrent modifi cations.

=== Synchronized Blocks ===
A monitor(lock) is a structure that supports mutual exclusion or the propert  that at most one thread is executing a particular segment of code at a given time.
Any Object can be used as a monitor, along with the synchronized keyword. Ex
SheepManager manager = new SheepManager();
synchronized(manager) {
	// Work to be completed by one thread at a time
}

Each thread that arrives will fi rst check if any threads are in the block

**Be careful** you must not  synchronized the creation of the threads.You must synchronise  the execution of the threads.

=== Synchronizing Methods ===
We can add the synchronized modifi er to any instance method to synchronize automatically on the object itself. For example, the following two method defi nitions are
equivalent:
private void incrementAndReport() {
	**synchronized(this)** {
	System.out.print((++sheepCount)+" ");
	}
}
private **synchronized** void incrementAndReport() {
	System.out.print((++sheepCount)+" ");
}

We can also add the synchronized modifier to static methods. Then the class object is used for monitor.

=== Cost of Synchronization ===
While multi-threaded programming is about doing multiple things at the same time, 
synchronization is about taking multiple threads and making them perform in a more single-threaded manner


Synchronization is about protecting data integrity at the cost of performance. In many cases, performance costs are minimal

==== Concurent Collections ====

=== Memory Consistency Errors ===
A memory consistency error occurs when two threads have inconsistent views of what should be the same data.
When two threads try to modify the same non-concurrent collection, the JVM may throw a ConcurrentModificationException at runtime

The concurrent classes were created to help avoid common issues in which multiple threads are adding and removing objects from the same collections. 
At any given instance, all threads should have the same consistent view of the structure of the collection.

You should use a concurrent collection class anytime that you are going to have multiple threads modify a collections object outside a synchronized block or method, even if you donât expect a concurrency problem. 
On the other hand, if all of the threads are accessing an established immutable or read-only collection, a concurrent collection class is not required.

=== Concurrent Classes ===
Ta b l e 7. 9  Concurrent collection classes page 360

The **BlockingQueue** is just like a regular Queue , except that it includes methods that will wait a specific amount of time to complete an operation
**offer**(E e, long timeout, TimeUnit unit) throws InterruptedException
	Adds item to the queue waiting the specified time, returning false if time elapses before space is available
	
**poll**(long timeout, TimeUnit unit) throws InterruptedException
	Retrieves and removes an item from the queue, waiting the specified time, returning null if the time elapses before the item is available

They throw checked exceptions be careful 

The **BlockingDeque **interface extends Deque , providing  waiting methods
**offerFirst**(E e, long timeout, TimeUnit unit)
	Adds an item to the front of the queue, waiting a specified time, returning false if time elapses before space is available

**offerLast**(E e, long timeout, TimeUnit unit)
	Adds an item to the tail of the queue, waiting a specified time, returning false if time elapses before space is available

**pollFirst**(long timeout, TimeUnit unit)
	Retrieves and removes an item from the front of the queue, waiting the specified time, returning null if the time elapses before the item is available

**pollLast**(long timeout, TimeUnit unit)
	Retrieves and removes an item from the tail of the queue, waiting the specified time, returning null if the time elapses before the item is available

They throw checked exceptions be careful 

**LinkedBlockingDeque** class that maintains a doubly linked list between elements and implements a BlockingDeque interface

**SkipList** classes, **ConcurrentSkipListSet** and **ConcurrentSkipListMap** , are concurrent versions of their sorted counterparts, TreeSet and TreeMap , respectively. 
They maintain their elements or keys in the natural ordering of their elements. 
When you see SkipList or SkipSet on the exam, just think âsortedâ concurrent collections.
it is recommended that you assign these objects to interface references, such as SortedMap or NavigableSet .

**CopyOnWriteArrayList CopyOnWriteArraySet**
copy all of their elements to a new underlying structure anytime an element is added, modifi ed, or removed from the collection. 
By a modifi ed element, we mean that the reference in the collection is changed. 
Modifying the actual contents of the collection will not cause a new structure to be allocated.

Despite adding elements to the array while iterating over it, only those elements in the collection at the time the for() loop was created were accessed.
Alternatively, if we had used a regular ArrayList object, a ConcurrentModificationException would have been thrown at runtime.

=== Synchronized Collections ===
Concurrency API also includes methods for obtaining synchronized versions of existing non-concurrent collection objects.
These methods, **defined in the Collections** class, contain synchronized methods that operate on the inputted collection and return a reference that is the same type as the underlying collection
methods
**synchronizedCollection**(Collection<T> c)
**synchronizedList**(List<T> list)
**synchronizedMap**(Map<K,V> m)
**synchronizedNavigableMap**(NavigableMap<K,V> m)
**synchronizedNavigableSet**(NavigableSet<T> s)
**synchronizedSet**(Set<T> s)
**synchronizedSortedMap**(SortedMap<K,V> m)
**synchronizedSortedSet**(SortedSet<T> s)

If you know at the time of creation that your object requires synchronization, then you should use one of the concurrent collection
classes listed in Table 7.9. On the other hand, if you are given an existing collection that is not a concurrent class and need to access it among multiple threads, you can wrap it using
these methods above

synchronize access to the data elements, such as the get() and set() methods, they do not synchronize access on any iterators that you
may create from the synchronized collection.
Therefore, it is imperative that you use a synchronization block if you need to iterate over any of the returned collection

the synchronized collections also throw an exception if they are modifi ed within an iterator by a single thread

==== Parallel streams ====

=== Creating Parallel Streams ===
**parallel()**
	create a parallel stream  from an existing stream
	Be aware that parallel() is an intermediate operation that operates on the original stream.

**parallelStream()**
	from a Java collection class
	EX: Arrays.asList(1,2,3,4,5,6).parallelStream();


=== Processing Tasks in Parallel ===
With a parallel stream, the forEach() operation is applied across multiple elements of the stream concurrently.
results are no longer ordered or predictable
The Streams API includes an alternate version of the forEach() operation called **forEachOrdered**() , 
which forces a parallel stream to process the results in order at the cost of performance

Parallel streams can improve **performance** because they rely on the property that many stream operations can be executed independently. 
By **independent operations**, we mean that the results of an operation on one element of a stream do not require or impact the results of another element of the stream.
map() , forEach() , and filter() can be processed independently.

**Side effects** can also appear in parallel streams if your lambda expressions are stateful.
**A** **stateful lambda expression i**s one whose result depends on any state that might change during the execution of a pipeline.

**order is not guaranteed** with parallel streams, methods such as findAny() on parallel streams may result in unexpected behavior.


=== Processing Parallel Reductions ===
Reduction operations on parallel streams are referred to as parallel reductions. The results for parallel reductions
can be different from what you expect when working with serial streams.
Since **order is not guaranteed** with parallel streams, methods such as **findAny**() on parallel streams may result in unexpected behavior

**reduce()** combines a stream into a single object.
Recall that first parameter to the reduce() method is called the **identity**, the second parameter is called the **accumulator**, and the third parameter is called the **combiner**

With parallel streams, though, we now have to be concerned about order
**Requirements for reduce() Arguments**
	a) The identity must be defined such that for all elements in the stream u ,
	combiner.apply(identity, u) is equal to u .
	b) The accumulator operator op must be associative and stateless such that (a op b) op c
	is equal to a op (b op c) .
	c) The combiner operator must also be associative and stateless and compatible with the
	identity, such that for all u and t combiner.apply(u,accumulator.apply(identity,t))
	is equal to accumulator.apply(u,t) .

these principles still apply to the identity and accumulator when using the one- or two-argument version of reduce()

**collect()** that takes accumulator and combiner operators, along with a supplier  instead of an identity.
Also like reduce() , the accumulator and combiner operations must be associative and stateless, with the combiner operation compatible with the accumulator operator
one-argument version of collect() takes a collector argument
TODO joÅ¡ jednom obraditi 

==== Processes ====

=== CyclicBarrier ===
Use to coordinate tasks.
The CyclicBarrier takes in its constructors a limit value, indicating the number of threads to wait for. As each thread finishes, it calls the await() method on the cyclic barrier. Once the specified number of threads have each called await() , the barrier is released and all threads can continue.
Ex: 
CyclicBarrier c1 = new CyclicBarrier(4);
CyclicBarrier c2 = new CyclicBarrier(4, () -> System.out.println("*** Pen Cleaned!"));
removeAnimals();
c1.await();
cleanPen();
c2.await();
addAnimals();

coordinating a task with a CyclicBarrier requires the object to be static or passed to the thread performing the task. 
We also add a try/catch block in the performTask() method, as the await() method throws multiple checked exceptions.


=== Fork/Join Framework ===
When a task gets too complicated, we can split the task into multiple other tasks.
Relies on the concept of recursion to solve complex tasks

Fork/join framework requires us to perform **three steps:**
1. Create a ForkJoinTask  (defining the recursive process)
2. Create the ForkJoinPool .
3. Start the ForkJoinTask .

Know how to implement the fork/join solution by extending one of two classes, **RecursiveAction** and **RecursiveTask** , both of which implement the ForkJoinTask interface.

**RecursiveAction **abstract class that requires us to implement the **compute**() method (retun void)
**RecursiveTask **abstract generic, implement **compute**() it returns generic type

Override the abstract compute() method, defining our base and recursive processes
For the recursive case, we split the work from one WeighAnimalAction object into two WeighAnimalAction instances, dividing the available indices between the two tasks
extends RecursiveAction
protected void compute() {
	if(end-start <= 3)
		for(int i=start; i<end; i++) {
			weights[i] = (double)new Random().nextInt(100);
			System.out.println("Animal Weighed: "+i);
	}
	else  {
		int middle = start+((end-start)/2);
		System.out.println("[start="+start+",middle="+middle+",end="+end+"]");
		**invokeAll**(new WeighAnimalAction(weights,start,middle), new WeighAnimalAction(weights,middle,end));
	}
}

**invokeAll**() method takes two instances of the fork/join class and does not return a result.

Creating the ForkJoinPool and starting the task is quite easy.
ForkJoinTask<?> task = new WeighAnimalAction(weights,0,weights.length);
ForkJoinPool pool pool = new ForkJoinPool();
pool.invoke(task);

the order of the output cannot be guaranteed

extends RecursiveTask
protected Double compute() {
	if(end-start <= 3) {
		double sum = 0;
		for(int i=start; i<end; i++) {
			weights[i] = (double)new Random().nextInt(100);
			System.out.println("Animal Weighed: "+i);
			sum += weights[i];
		}
		**return sum;**
	} else {
		int middle = start+((end-start)/2);
		System.out.println("[start="+start+",middle="+middle+",end="+end+"]");
		**RecursiveTask<Double> otherTask = new WeighAnimalTask(weights,start,middle);**
		**otherTask.fork();**
		**return new WeighAnimalTask(weights,middle,end).compute() + otherTask.join();**
} } }

**fork**() method causes a new task to be submitted to the pool and is similar to the
thread executor submit() method.
**join**() method is called after the fork() method and causes the current thread to
wait for the results of a subtask.

we issue a fork() and join() command to retrieve the recursive data. 
The **fork**() method instructs the fork/join framework to complete the task in a separate thread, while the **join**() method causes the current thread to wait for the results
Make sure that fork() is called before the current thread begins a subtask and that join() is called after it finishes retrieving the results, in order for them to be done in parallel.

Unlike fork() , calling compute() within a compute() method causes the task to wait for the results of the subtask.
The fork() method should be called before the current thread performs a compute() operation, with join() called to read the results afterward.
Since compute() takes no arguments, the constructor of the class is often used to pass instructions to the task.

==== Problems ====

=== Liveness ===
Liveness problems, then, are those in which the application becomes unresponsive or in some kind of âstuckâ state.
 For the exam, there are three types of liveness issues with which you should be familiar: deadlock, starvation, and livelock

**Deadlock** occurs when two or more threads are blocked forever, each waiting on the other

**Starvation** occurs when a single thread is perpetually denied access to a shared resource or lock. The thread is still active, but it is unable to complete its work as a result of other threads constantly taking the resource that they trying to access.

**Livelock** occurs when two or more threads are conceptually blocked forever, although they are each still active and trying to complete their task. Livelock is a special case of resource starvation in which two or more threads actively try to acquire a set of locks, are unable to do so, and restart part of the process.
Livelock is often a result of two threads trying to resolve a deadlock.

=== Race Conditions ===
A race condition is an undesirable result that occurs when two tasks, which should be completed sequentially, are completed at the same time.
Race conditions lead to invalid data if they are not properly handled
