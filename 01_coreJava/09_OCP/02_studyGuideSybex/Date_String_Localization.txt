Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-10-08T10:47:18+02:00

====== Date String Localization ======
Created utorak 08 listopada 2019

**Date and Time**

LocalDate Contains just a date—no time and no time zone.
LocalTime Contains just a time—no date and no time zone.
LocalDateTime Contains both a date and time but no time zone.
ZonedDateTime Contains a date, time, and time zone.

create new use static method now() Ex: LocalDate.now();

Greenwich Mean Time is a time zone in Europe that is used as time zone zero when
discussing offsets. GMT or UTC  **todo**

LocalDate date1 = LocalDate.of(2015, Month.JANUARY, 20);
LocalDate date2 = LocalDate.of(2015, 1, 20);
	number of the month the same way you would if you were writing the date in real life

boolean b2 = month == Month.APRIL; // DOES NOT COMPILE

LocalTime.of(6, 15, 30, 200); // + sec + nanosec

You can combine dates and times into one object:
LocalDateTime.of(date1, time1);

In order to create a ZonedDateTime , we first need to get the desired time zone
	**ZoneId zone = ZoneId.of("US/Eastern");**
	ZonedDateTime.of(2015, 1, 20, 6, 15, 30, 200, zone);
	ZonedDateTime.of(date1, time1, zone);
	ZonedDateTime.of(dateTime1, zone);
**Notice that there isn’t an option to pass in the Month enum.**

The date and time classes have private constructors to force you to use the factory’s static methods
Another trick is what happens when you pass invalid numbers to of()  
	LocalDate.of(2015, Month.JANUARY, 32) // throws DateTimeException  (Invalid value for DayOfMonth)
	
**The date and time classes are immutable.**
	we need to remem-ber to assign the results of these methods to a reference variable so that they are not lost.
plusDays(int n); minusDays(int n);
plusWeeks(int n); minusHours(int n);
plusMonths(int n);  minusSeconds(int n);
plusYears(int n); minusNanos(int n);

It is common for date and time methods to be chained
	 LocalDateTime.of(date,time) .minusDays(1).minusHours(10).minusSeconds(30);
	
LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
date = date.plusMinutes(1);** // DOES NOT COMPILE**


LocalDate and LocalDateTime have a method to convert themselves into long equiva-
lents in relation to January 1, 1970
LocalDate has toEpochDay() LocalDateTime and ZonedDateTime have toEpochSecond()
LocalTime does not have an epoch method

**Periods**
Period period =  Period.ofDays(2); Period.ofWeeks(3);   Period.ofMonths(1); Period.ofYears(1);
Period.of(1, 0, 7);  // every year and 7 days

**You cannot chain methods when creating a Period**
Period wrong = Period.ofYears(1).ofWeeks(1); // every week
only the last method is used because the Period of methods are static methods.
You will get a compiler warning about this

Period format **P1Y2M3D**
displays only  non-zero parts  Ex: Period.ofMonths(3) P3M
It’s OK to have more days than are in a month.
It is OK to have more months than are in a year.
Period.ofWeeks(3)  → P21D . Remember that week is not one of the units a Period stores.

You can add period to LocalDate, LocalTime, LocalDateTime , TODO provjeri za ZoneDateTIme
Period period = Period.ofMonths(1);
date.plus(period); ok 
dateTime.plus(period); ok
time.plus(period); nok // UnsupportedTemporalTypeException

**Durations**
Period are for day or more time but Duration if for smaller units of time (number of days, hours, minutes, secounds, and nanosecuds) The number of seconds includes fractional seconds.
Duration roughly works the same way as Period , except it is used with
objects that have time. 
Duration is output beginning with PT 
	Duration.ofDays(1); PT24H
	 Duration.ofHours(1); 	PT1H
	 Duration.ofMinutes(1); 	PT1M 
	 Duration.ofSeconds(10); 	PT10S
	 Duration.ofMillis(1); 	PT0.001S
	 Duration.ofNanos(1); 	PT0.000000001S

Duration doesn’t have a mehod that takes multiple units like Period does.
want something to happen every hour and a half, you would specify 90 minutes.

Duration includes another  factory method. It takes a number and a interface TemporalUnit (implementation is in ChronoUnit)
	Duration.of(1, ChronoUnit.DAYS); 
	ChronoUnit.HALF_DAYS / 12H
	ChronoUnit.HOURS.between(time1, time2) // LocalTime
	hronoUnit.MINUTES.between(time1, date1) // LocalTime and LocalDate -> **DateTimeException**
	
You can add duration to LocalTime LocalDateTime TODO provjeri za ZoneDateTIme
Duration duration = Duration.ofHours(6);
dateTime.plus(duration)); // ok  time.plus(duration)); ok
date.plus(duration)); // **UnsupportedTemporalException**

see table 5.4 page 250 or 302


**Instants**
The Instant class represents a specific moment in time in the GMT time zone
Instant now = Instant.now();
// do something job 
Instant later = Instant.now();
Duration duration = Duration.between(now, later);

If you have a ZonedDateTime , you can turn it into an Instant :
Instant instant = zonedDateTime.toInstant() ;  // represent the same moment in time
The Instant gets rid of the time zone and turns it into an Instant of time in GMT
You cannot convert a LocalDateTime to an Instant . Remember that an Instant is a
point in time. A LocalDateTime does not contain a time zone, and it is therefore not univer-
sally recognized around the world as the same moment in time

epochSeconds = number of seconds since 1970
Instant.ofEpochSecond(epochSeconds);

you can do math  Instant nextDay = instant.plus(1, ChronoUnit.DAYS); allows you to add any unit day or smaller

**Accounting for Daylight Savings Time TODO**

**String**
The value cannot change on an immutable object, as discussed in Chapter 2. This allows Java to optimize by storing string literals in the string pool. This also means that you can compare string literals with == . However, it is still a good idea to compare with equals() , because String objects created via a constructor or a method call will not always match when using comparison with ==

trim() removes any whitespace characters from the beginning and end of a String

**Localization**
Internationalization just means that you can.
Localization means actually supporting multiple locales

Locale locale = Locale.getDefault();
en_US 
	en -> language
	US -> country
	
Locale.GERMAN  // de
Locale.GERMAN Y // de_DE

new Locale("fr") -> fr
new Locale("fr", "IN") -> hi_IN

Locale l1 = new Locale.Builder()
.setLanguage("en")
.setRegion("US")
.build();

Locale.Builder also lets you do other bad things like create a blank Locale . Please don’t.
The locale builder converts to uppercase or lowercase for you as needed.

Locale locale = new Locale("fr");
Locale.setDefault(locale); // change the default

**Resource Bundle**
map with keys and values
The resource bundle can be in a property fi le or in a Java class. A property fi le is a fi le in a specifi c format with key/value pairs.

Notice that the filenames are the name of our resource bundle followed by an underscore followed by the target locale.
EX:  Zoo_en.properties, Zoo_fr.properties
Locale france = new Locale("fr", "FR");
ResourceBundle rb = ResourceBundle.getBundle("Zoo", locale);

syntax in property file
	animal=dolphin
	animal:dolphin
	animal dolphin
	**If a line begins with # or ! , it is a comment.**
	**Spaces before or after the separator character are ignored.**
	Spaces at the beginning of a line are ignored.
	Spaces at the end of a line are not ignored.
	End a line with a backslash if you want to break the line for readability.
	You can use normal Java escape characters like \t and \n .
EX: 
	# one comment
	! another comment
	key =	value\tafter tab
	long = abcdefghijklm\
	nopqrstuvwxyz
	Printing out these two properties in a program gives us this:
	value → after tab
	abcdefghijklmnopqrstuvwxyz

ResourceBundle class provides a method to get a set of all keys:
	rb.keySet(); // ResourceBundle rb

Properties has some additional features, including being able to pass a default.
Converting from ResourceBundle to Properties is easy:
Properties props = new Properties();
rb.keySet().stream().forEach(k -> props.put(k, rb.getString(k)));

System.out.println(props.getProperty("notReallyAProperty"));
System.out.println(props.getProperty("notReallyAProperty", "123"));
The first line prints null , since that property doesn’t exist. The second prints 123 , since the property wasn’t found.
getProperty("key") Value null
getProperty("key", "default") Value "default"

**Java Class Resource Bundle**
Java class resource bundles allow any Java type as the value. Keys are strings regardless.
you create a class with the same name that you would use for a property file. Only the extension is different. 
Since we have a Java object, the file must be a .java file rather than a .properties file.

public class Zoo_en extends ListResourceBundle {}

The ListResourceBundle abstract class leaves one method for subclasses to implement (protected Object[][] getContents())
You can use a value type that is not a String .
You can create the values of the properties at runtime.

**Determining Which Resource Bundle to Use**
there are two methods for getting a resource bundle:
ResourceBundle.getBundle("name"); // uses the default locale
ResourceBundle.getBundle("name", locale);

**Steps:**
	Always look for the property file after the matching Java class.
	Drop one thing at a time if there are no matches. First drop the country and then the language.
	Look at the default locale and the default resource bundle last.
Java goes through when asked for resource bundle Zoo with the locale new Locale("fr", "FR")
1 Zoo_fr_FR**.java The requested locale**
2 Zoo_fr_FR**.properties The requested locale**
3 Zoo_fr.java The language we requested **with no country**
4 Zoo_fr.properties The language we requested with no country
5 Zoo_en_US.java **The default locale**
6 Zoo_en_US.properties The default locale
7 Zoo_en.java The **default language with no country**
8 Zoo_en.properties The default language with no country
9 Zoo.java **No locale at all—the default bundle**
10 Zoo.properties No locale at all—the default bundle
11 **If still not found, throw MissingResourceException** .

Didn’t specify any country codes so Java got to skip looking for those. 
If we ask for the default locale, Java will start searching the bundles starting with step 6 in
**TODO PAGE 266**

**Formatting and parsing Numbers**

Regardless of whether you want to format or parse, the fi rst step is the same. You need to create a NumberFormat
java.text package
A general purpose formatter 
	NumberFormat.getInstance()
	NumberFormat.getInstance(locale)
Same as getInstance 
	NumberFormat.getNumberInstance()
	NumberFormat.getNumberInstance(locale)
For formatting monetary amounts 
	NumberFormat.getCurrencyInstance()
	NumberFormat.getCurrencyInstance(locale)
For formatting percentages 
	NumberFormat.getPercentInstance()
	NumberFormat.getPercentInstance(locale)
Rounds decimal values before displaying (not on the exam) 
	NumberFormat.getIntegerInstance()
	NumberFormat.getIntegerInstance(locale)

Once you have the NumberFormat instance, you can call format() to turn a number into a String and parse() to turn a String into a number.
The format method formats the given number based on the locale associated with the
NumberFormat object Ex:
	int attendeesPerMonth = attendeesPerYear / 12;
	NumberFormat us = NumberFormat.getInstance(Locale.US);
	System.out.println(us.format(attendeesPerMonth));

The NumberFormat class defi nes a parse method for parsing a String into a number using a specifi c locale
The parse methods for the different types of formats throw the checked exception ParseException if they fail to parse.
If you see parsing logic inside a method, make sure that ParseException or Exception is handled or declared.

The parse method parses only the beginning of a string. After it reaches a character that cannot be parsed, the parsing stops and the value is returned.
String one = "456abc"; String two = "-2.5165x10"; String three = "x85.3";
System.out.println(nf.parse(one)); // 456 
System.out.println(nf.parse(two)); // -2.5165
System.out.println(nf.parse(three));// throws ParseException
The first two lines parse correctly. There happen to be extra characters after the number, but that’s OK.
The third parsing fails because there are no numbers at the beginning of the String . Java instead throws a java.text.ParseException .

Parse method is also used for parsing currency.

**TODO** AMERICA, GERMANNY PARSE PRAVILA (TOČKA, ZAREZ ITD)

**Formatting Dates and Times**
use DateTimeFormatter  java.tme.format can format any type of date/time object 

Predefined formats:
DateTimeFormatter shortDateTime =
DateTimeFormatter.**ofLocalizedDate(FormatStyle.SHORT);**
System.out.println(shortDateTime.format(**dateTime**)); // 1/20/20
System.out.println(shortDateTime.format(**date**)); // 1/20/20
System.out.println(shortDateTime.format(**time**)); // **UnsupportedTemporalTypeException**

see table 5.10 page 323


There are two predefined formats that can show up on the exam: SHORT and MEDIUM .
shortF.format(dateTime); // 1/20/20 11:12 AM
mediumF.format(dateTime); // Jan 20, 2020 11:12:34 AM

If you don’t want to use one of the predefined formats, you can create your own. For example, this code spells out the month:
DateTimeFormatter f = DateTimeFormatter.ofPattern("MMMM dd, yyyy, hh:mm");

**MMMM**
M represents the month. The more M s you have, the more verbose the Java output. For example, M outputs 1, MM outputs 01, MMM outputs Jan, and MMMM outputs January.

**dd**
d represents the day in the month. As with month , the more d s you have, the more verbose the Java output. dd means to include the leading zero for a single-digit day.

**, **
Use , if you want to output a comma (this also appears after the year).

**yyyy**
y represents the year. yy outputs a two-digit year and yyyy outputs a four-digit year

**hh**
h represents the hour. Use hh to include the leading zero if you’re outputting a single-digit hour.

**: **
Use : if you want to output a colon.

**mm**
m represents the minute omitting the leading zero if present. mm is more common and represents the minutes using two digits

SimpleDateFormat it the old way DateTimeFormatter is the new way

Parse date
DateTimeFormatter f = DateTimeFormatter.ofPattern("MM dd yyyy");
LocalDate date = **LocalDate.parse("01 02 2015", f);**


