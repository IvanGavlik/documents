prati: https://www.estudent.hr/

todo
-> https://bigthink.com/experts-corner/10-problems-with-how-we-think
email data 

psychologits
-> https://thebestschools.org/features/most-influential-psychologists-world/


"Read 500 pages every day. That's how knowledge works. It builds up like compound interest." - Warren Buffett

myCompanyPlan
-> Instructor one to one
-> Plugins
-> Tutorials
-> Certifications
-> Funny programing langulage like Arnold Swancerneger hehe
-> Hacker Rank solving algorithms 
-> web pages: having sponzors for project web page , afilative 
-> side project https://www.youtube.com/watch?v=m3nb_Qj3mRA advice
-> FIND CLENTS https://www.youtube.com/watch?v=nZaZOFs0ZMg

-> https://www.quora.com/What-are-the-best-freelancing-sites
-> https://www.poslovni.hr/kako-su-uspjeli/warren-buffett-i-bill-gates-slazu-se-da-je-klasik-iz-1969-jos-uvijek-najbolja-knjiga-svih-vremena-evo-zasto-352239

bussines advices and personal advices
-> https://www.quora.com/What-are-some-books-on-a-software-business-model
-> https://waitbutwhy.com/2015/11/the-cook-and-the-chef-musks-secret-sauce.html
https://waitbutwhy.com/2015/11/the-cook-and-the-chef-musks-secret-sauce.html
https://www.amazon.com/Systems-Thinker-Essential-Thinking-Solutions-ebook/dp/B07HLBCM4G/ref=pd_sim_351_4/132-7940366-6257864?_encoding=UTF8&pd_rd_i=B07HLBCM4G&pd_rd_r=3516132f-1d02-11e9-a4fc-e3295557d665&pd_rd_w=76Tw8&pd_rd_wg=UW9Gr&pf_rd_p=18bb0b78-4200-49b9-ac91-f141d61a1780&pf_rd_r=18MQ8NKJZ1EA9RK8B5RZ&psc=1&refRID=18MQ8NKJZ1EA9RK8B5RZ


CONDISER: https://www.quora.com/What-is-the-single-best-programming-book-of-all-times-in-your-opinion-that-every-programmer-should-read
I will list a few:

#1. “Algorithms + Data Structures = Programs” by Wirth. This was a profound book. It set the bar as to what is good book and language for learning algorithms and data structures. The Pascal language lead to languages like Java and influenced C and C++.

#2. “The Art of Computer Programming: Fundamental Algorithms: Vol 1” by Knuth. This was my first book on algorithms and data structures. It was first book to attempt algorithm analysis. This book lost a lot of relevance when programming stopped using Assembly code in the 80’s. UPDATE: Reading Knuth’s work is important for it gives a reflection of the extraordinary effort it takes to write good Assembly code. It is also to compare the discussions of the algorithms implemented in Knuth with equivalent code in other algorithms books. This different shows a dramatic shift in programming construction between assembly and higher level languages. For its time (the late 60’s), this volume is an exemplar of how Assembly code be developed, annotated, documented, and written. All the necessary intermediate work products that lead to excellent Assembly code are presented for each algorithm. My first two years working for a computer manufacture in their compiler group was all in Assembly code. Knuth was my example to base my work products.

#3. Algorithms by Sedgwick. In four editions he refines his approach to teaching undergraduate Algorithms. He focus on understanding how the code works. He uses visual representations when possible. He minimizes the math to focus on the “How” of algorithms.

#4 “Programming Languages: Design and Implementation” 1st edition by Pratt. This book taught me the importance understanding the run time environments of different programming languages in addition to the syntax and semantics. When Identifiers were “bound” is critical to understanding the static vs dynamics aspects of computer languages. I continue collect newer versions of Programming Languages books over the decades. Pratt left an lasting impression and a thirst to continue studying programming languages long after college.




    4. Elements of Critical Thinking

CODE ASSIGMENTS: https://leetcode.com/problems/add-two-numbers/description/

Volonter pronadji

1. https://www.volunteermatch.org
2. https://www.idealist.org
3. https://govolunteer.com.au/
4. https://www.charityjob.co.uk/volunteer-jobs
5. https://do-it.org/opportunities/search

šah
-> http://billwall.phpwebhosting.com/permanent/700_Opening_Traps.pdf

ocp
https://webets-server-aws.enthuware.com/webets.html
lozinka: 191001


basic
-> https://www.youtube.com/watch?v=P1ww1IXRfTA
-> https://www.youtube.com/watch?v=NdSD07U5uBs
-> https://www.quora.com/What-are-the-good-ways-to-learn-to-stay-focused
-> https://www.quora.com/What-are-some-books-that-can-improve-our-everyday-skills
-> https://www.quora.com/Smart-People-What-books-make-you-intelligent-and-clever
-> https://jasonroell.com/2015/03/16/12-most-infuential-books-every-software-engineer-needs-to-read/
-> https://www.youtube.com/watch?v=NdSD07U5uBs
-> https://www.amazon.com/Computer-Programming-Volumes-1-4A-Boxed/dp/0321751043
-> https://www.quora.com/What-is-the-single-best-programming-book-of-all-times-in-your-opinion-that-every-programmer-should-read
-> https://alison.com/courses

find api
-> https://nordicapis.com/api-discovery-15-ways-to-find-apis/

money
-> https://www.doughroller.net/investing/how-to-invest-with-little-money/

java
->
https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html

https://javarevisited.blogspot.com/2018/01/top-20-libraries-and-apis-for-java-programmers.html#axzz68p1DEQYT

https://javarevisited.blogspot.com/2019/02/10-tools-advanced-java-developers-should-know.html#axzz68p17oWSJ

https://javarevisited.blogspot.com/2017/12/10-things-java-programmers-should-learn.html#axzz53ENLS1RB

-> Core Java 1.2 : Fundamentals
by Gary Cornell and Cay S. Horstmann
->  https://www.java67.com/2015/07/5-books-learn-java-8-functional-programming.html
-> https://kotlinlang.org/docs/reference/generics.html
-> https://java-design-patterns.com/principles/
-> https://www.tutorialspoint.com/jmeter/jmeter_environment.htm


blog 
-> https://www.techrepublic.com/article/how-programming-will-change-over-the-next-10-years-5-predictions/
-> https://www.quora.com/Smart-People-What-books-make-you-intelligent-and-clever
-> https://www.knowfacts.info/2019/11/7-bad-habits-that-are-actually-good-for.html?utm_source=quora&utm_medium=referral
-> https://triplebyte.com/blog/getting-job-ready-while-pursuing-a-cs-degree
-> https://www.quora.com/q/creativeprogramming?__ni__=0&__nsrc__=4&__snid3__=17618010391&__tiids__=21680876
-> https://www.quora.com/What-is-the-biggest-failure-in-modern-programming
-> https://triplebyte.com/blog/8-non-technical-books-that-will-make-you-a-better-engineer
-> http://michael-roberto.blogspot.com/2020/11/are-you-spending-your-time-correctly.html
-> http://michael-roberto.blogspot.com/2020/12/my-favorite-books-of-2020.html
-> https://onextrapixel.com/what-is-color-theory/
-> https://medium.com/swlh/top-9-books-that-every-web-developer-needs-to-read-in-2020-cd9cbafbc76e
-> https://inside.java/
-> https://www.oracle.com/technical-resources/
-> https://www.javacodegeeks.com/2014/05/10-articles-every-programmer-must-read.html?fbclid=IwAR3C1TOlcwU6OytlgY1ggFYdNbc6039vwDbKioN-sgExwqlkutaTpuZMFCE

libs
-> https://github.com/akullpp/awesome-java#web-frameworks
-> https://javarevisited.blogspot.com/2018/01/top-20-libraries-and-apis-for-java-programmers.html?utm_source=dlvr.it&utm_medium=facebook#axzz6cNSHuh5Y

testing
-> https://javarevisited.blogspot.com/2018/01/10-unit-testing-and-integration-tools-for-java-programmers.html?fbclid=IwAR3OpN6AR94ilAr0E2rvYUDJzfgZxpzWtfM0dMNku2ukR25x4NgNep9mg24#axzz6j5Kgmugn


open shift
-> https://piotrminkowski.com/2021/02/05/java-development-on-openshift-with-odo/

ocp
-> https://www.codejava.net/java-certifications/ocpjp-preparation-guide-and-study-materials?fbclid=IwAR1nAVardS2ImIBoPhmWXfy7FPQM7LtctVciKF-aSrD1LQi1YmIUQbfikY4

roadmap backed 
-> https://www.freecodecamp.org/news/100-popular-free-online-courses-2019/?fbclid=IwAR1rMObsV232xg_e7-Ik8eXRJPcm4d3uvmT5dt4PbdYJxfNGdLysi1s4dhA
-> https://www.java67.com/2015/03/10-books-every-programmer-and-software-engineer-read.html
-> https://www.quora.com/Which-books-should-I-read-to-become-end-to-end-Java-developer
-> https://medium.com/coderbyte/a-guide-to-becoming-a-full-stack-developer-in-2017-5c3c08a1600c
-> https://www.brainbench.com/xml/bb/skillscenter/jobrolecenter.xml
-> https://www.javacodegeeks.com/2014/07/step-by-step-path-to-becoming-a-great-software-developer.html
-> https://hackernoon.com/5-technology-trends-to-learn-in-2018-if-you-want-a-great-career-caf2e2318abb
-> https://roadmap.sh/backend
-> https://github.com/kamranahmedse/developer-roadmap
-> https://www.java-success.com/java-scenarios-based-interview-questions-answers/
-> https://www.oreilly.com/library/view/the-design-of/9780321702081/


git
-> https://datasift.github.io/gitflow/IntroducingGitFlow.html

learn todo QUAKUS
-> https://quarkus.io/

math
-> https://hackernoon.com/be-a-better-programmer-with-these-40-mathematics-courses-d8ca48a2f8a2
-> math form programers: https://www.manning.com/books/math-for-programmers?trk_msg=3SBSAE2UPLMKP5NUJ379IUHVN4&trk_contact=3BAMN42PTTSTRA892275LFMIUC&trk_sid=45HHGDKDFSIQIAS4J9J3F0PKAK&utm_source=Listrak&utm_medium=Email&utm_term=https%3a%2f%2fwww.manning.com%2fbooks%2fmath-for-programmers&utm_campaign=TODAY+ONLY!+Half+Off+your+perfect+pair
-> https://nautil.us/issue/40/learning/how-i-rewired-my-brain-to-become-fluent-in-math-rp
-> https://www.slader.com/textbook/9780470458365-advanced-engineering-mathematics-10th-edition/

code review
-> https://google.github.io/eng-practices/review/reviewer/
-> https://patricia.no/2018/09/19/reading_other_peoples_code.html

refactor
-> https://en.wikipedia.org/wiki/Code_refactoring

how to create procject from A to T
-> https://awesomeopensource.com/project/elsewhencode/project-guidelines

design patterns
-> https://java-design-patterns.com/
-> https://sourcemaking.com/design_patterns/structural_patterns
-> https://awesomeopensource.com/projects/design-patterns

sytem design and architecture
-> https://medium.com/javarevisited/top-5-courses-to-learn-software-architecture-in-2020-best-of-lot-5d34ebc52e9
-> scalability: https://awesomeopensource.com/project/binhnguyennus/awesome-scalability
-> https://www.coursera.org/specializations/software-design-architecture?action=enroll

-> https://awesomeopensource.com/project/donnemartin/system-design-primer
David Patterson and John Hennessy write in Computer Organization and Design,

->
verzija microkernel /microservise arhitekture

The MINIX 3 microkernel is only about 12,000 lines of C and some 1400 lines
of assembler for very low-level functions such as catching interrupts and switching
processes. The C code manages and schedules processes, handles interprocess
communication (by passing messages between processes), and offers a set of about
40 kernel calls to allow the rest of the operating system to do its work. These calls
perform functions like hooking handlers to interrupts, moving data between address
spaces, and installing memory maps for new processes. The process structure
of MINIX 3 is shown in Fig. 1-26, with the kernel call handlers labeled Sys. The
device driver for the clock is also in the kernel because the scheduler interacts
closely with it. The other device drivers run as separate user processes.


Various researchers have repeatedly studied the number of bugs per 1000 lines of code (e.g., Basilli and Perricone, 1984; and Ostrand and Weyuker, 2002). Bug density depends on module size, module age, and more, but a ballpark figure for serious industrial systems is between two and ten bugs per thousand lines of code.

-> https://www.educative.io/courses/web-application-software-architecture-101



https://www.reddit.com/r/programming/comments/d5mzcm/software_architecture_is_overrated_clear_and/

https://www.reddit.com/r/SoftwareEngineering/comments/cd4dhc/recommend_some_good_books_on_software/

https://www.reddit.com/r/softwarearchitecture/comments/drey2q/what_are_the_best_ways_conferences_to_learn/

https://github.com/AlaaAttya/software-architect-roadmap
¸
https://www.reddit.com/r/SoftwareEngineering/comments/dqvq5n/software_architecture_book_500_lines_or_less/

http://aosabook.org/en/index.html

https://groups.google.com/forum/#!forum/500-lines-or-less-study-group

https://www.reddit.com/r/SoftwareEngineering/comments/dylgbk/what_are_modern_software_architectures/

list of architecture framweorks
-> http://www.iso-architecture.org/42010/afs/frameworks-table.html

projet 
-> https://archive.jlongster.com/How-I-Became-Better-Programmer
-> applikaciju pomocu koje se moze kreirati internet trgovina i web store i web page 


open source 
-> https://www.quora.com/What-are-some-%E2%80%98good%E2%80%99-open-source-Java-projects

->

What are some Java projects on GitHub for a novice programer to learn and contribute?
Originally Answered: What are some Java projects on Github for a novice programer to learn and contribute?

Here are some repositories in github that you may like. You can start with this simple code and try to improve it :

1- explains oop patterns in Java : iluwatar/java-design-patterns

2- examples of Java7 well written code can be found here : javaee-samples/javaee7-samples

3- algorithms implementation : phishman3579/java-algorithms-implementation




----------------

for libs section


Here is a detailed list from github.

1-Web development in Java :

playframework/playframework

Play Framework The Play Frameworkcombines productivity and performance making it easy to build scalable webapplications with Java and Scala. Number of stars 7777 at the moment ofwritting.

2-Business

Codecademy/EventHub

Event analytics platform : Number of stars on github 1133

An alternative to that is also killbill/killbill

3- Game development

libgdx/libgdx

with 8579 stars at the moment.

4- Collections

google/guava

by 8811 stars is the first of its genre.

5- Date and Time

JodaOrg/joda-time

Joda is probably the best with 2061 stars

6- Dependency injection

The king is spring-projects/spring-framework

with 8631 stars

7- Logging

Here it is : Graylog2/graylog2-server

with 1722 stars

8- Imagery and Video

facebook/rebound
with 3299 stars is the best. The alternative :processing/processing

with 2648 stars

9- API integration

openzipkin/zipkin

Number of stars = 3427

10- Science

jgrapht/jgrapht

with 655 stars

11- Database

thinkaurelius/titan

with 3672 stars.

12- Functional programming

orfjackal/retrolambda

Nr of stars 2174.

13- security and authentication

scribejava/scribejava

by 3297 stars

14-Serialization and IO

square/okio

with 2280 stars

15- Machine learning Natural language processing :M

stanfordnlp/CoreNLP

with 1757 stars.

16- Web crawling and HTML parsing

sparklemotion/nokogiri
with 3805 stars



popis it firmi cro
-> https://www.cisex.org/hr/projekti

resoursi

https://eu.udacity.com/course/networking-for-web-developers--ud256 

https://eu.udacity.com/course/http-web-servers--ud303

https://www.udemy.com/how-to-become-the-perfect-web-and-information-architect/

https://www.udemy.com/java-the-complete-java-developer-course/

https://www.udemy.com/it-security-and-ethical-hacking/

https://www.udemy.com/java-8-new-features-in-simple-way/

https://www.udemy.com/java-ee-with-vaadin-spring-boot-and-maven/

https://www.udemy.com/java-spring-framework/

https://www.udemy.com/professional-android-app-development-training/

https://www.udemy.com/the-ultimate-android-tutorial/

https://www.udemy.com/java-jsp-jsf/

https://www.udemy.com/java-9-new-features-in-simple-way-jshell-jpms-and-more/

https://www.udemy.com/complete-jdbc-programming-part-2/

https://www.udemy.com/build-your-blockchain-az/

https://www.udemy.com/business-analysis-ba/

consider:  https://quarkus.io/

AI
-> http://www.deeplearningbook.org/contents/TOC.html
-> https://www.youtube.com/watch?v=-2AcCEZaCZM&fbclid=IwAR310sTawzHo-OgNIZR4mtcBXB1G9JohEd3KkmmDdd1ZZKUzU-m3lPHFSqg

projects with source code
https://sourceforge.net/projects/atschool/
https://sourceforge.net/directory/os:windows/?q=asp.net+mvc+5+school+project

http://www.enggroom.com/Aspnet.aspx

https://www.c-sharpcorner.com/article/asp-net-core-mvc-project-event-management/
https://www.c-sharpcorner.com/article/asp-net-core-mvc-project-event-management/

http://1000projects.org/asp-net-mvc-example-projects.html
http://projects.sourcecodehub.com/index.php/asp-net-mvc-3-c-student-information-system-project-source-code-download/



jhispter
-> https://www.jhipster.tech/#/learn

javafx
-> https://dzone.com/refcardz/javafx-8-1
-> https://www.youtube.com/watch?v=xk-YfIdH0_Y
-> http://code.makery.ch/library/javafx-8-tutorial/part1/
-> http://gamedevelopment.tutsplus.com/tutorials/introduction-to-javafx-for-game-development--cms-23835


java programiranje
Uvijek i svugdje, kad god postavljate pitanje, postajte i kod. Kod vrijedi više od 1000 riječi. Zar bismo trebali pretpostavljati što je i kako iskodirano pa onda nagađati odgovore? Kako ćemo tako išta riješiti u razumnom roku? Zato, postajte kod i pitajte. /****************************************/ Uz prethodnu diskusiju vezanu za verzije Jave - kao što je Deus Ex već rekao: za potrebe učenja i upoznavanja jezika, sva literatura vezana za Java SE 5 ili veću verziju je dobra literatura. Više verzije ne donose značajnije novosti, osobito ne za osnove programiranja.Već je prethodno spomenuta Heads First: Java kao odličan izbor za prve kontakte s Javom i to je obvezna literatura - od toga sve kreće.
Za ljude koji nisu zadovoljni predavanjima koje trenutno slušaju ili jednostavno žele nešto totalno sjajno i izvrsno kao početnu točku za upoznavanje s Javom, mislim da se nema gledati što dalje od besplatnih 40-ak predavanja profesora Mehrama Sahamija sa Computer Sciences katedre Stanford Universityja. Sva predavanja dostupna su na Jubitou, pretpostavljaju NIKAKVO prethodno znanje u programiranju i zaista su nešto što se ne bi trebalo propustiti. Što reći osim - tako izgledaju prava predavanja:(LINK) Sahami, M., A Course in Programming Methodology (CS106A) Nakon što se Heads First knjiga savlada (i svi zadaci točno porješavaju), ja bih tu još dodao i službenu literaturu za certifikaciju (0), a za one koji zaista žele ovladati jezikom i svim njegovim nijansama, te zarađivati za kruh programirajući u Javi, preporučujem nešto od sljedećeg:(0) Sierra, K., Bates, B., Sun Certified Programmer Exam 6(1) Eckel, B., Thinking in Java, 4th ed.(2) Deitel, P., Deitel, H., How to Program in Java, 9th ed.(3) Java SE 7 Language Specification (JSR-336 Update) -- PDF download Za one koji žele online vježbati rješavanje različitih problema progresivne složenosti u Javi, mislim da nema boljeg sitea od CodingBata. Site doslovce kreće od najjednostavnijih primjera, ima automatizirane testove koji odmah provjeravaju napisani kod, te (za one koji su se registrirali) - bilježi napredak i "Achievmentse" ( :) ). Prve lekcije (nekih 50-ak zadataka) imaju i priložena rješenja i komentare. Kreće se od elementarnih primjera, preko rada sa logičkim operatorima, poljima i Stringovima, a završava se sa rekurzijom. Izvrsno!(LINK) CodingBat Također, kolekcija sijaset izvrsnih primjera i best-practices scenarija što raditi, a što ne raditi tijekom programiranja u Javi, nalazi se na JavaPractices siteu.(LINK) JavaPractices Najzad, krasni skup anti-patterna u Javi za malo iskusnije korisnike nalazi se ovdje:(LINK) Java Anti-Patterns Na kraju - savjet: slijedite KISS metodologiju. Ne komplicirajte bespotrebno uvođenjem novih tehnologija i frameworka dok pod prstima nemate osnove osnova. Osnove osnova su (IMHO): rad sa primitivima, rad sa klasama i elementarno objektno-orijentirano programiranje (što je u biti rad s klasama). 


https://www.wibit.net/course/Intro Introduction to Computer Programming
https://www.wibit.net/course/Intro_OOP


https://eu.udacity.com/course/networking-for-web-developers--ud256 
https://eu.udacity.com/course/http-web-servers--ud303

spring security
https://medium.com/@boudhayan-dev/demystifying-spring-security-setup-e0491acc7df7

ORM IS bad -> solution
https://www.yegor256.com/2014/12/01/orm-offensive-anti-pattern.html

immutable objecst in hole project 
https://github.com/yegor256/takes